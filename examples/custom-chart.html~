<!DOCTYPE html>
<html lang="en">
<head>
    <title>dc.js - Custom Chart Example</title>
    <meta charset="UTF-8">
    <link rel="stylesheet" type="text/css" href="../css/bootstrap.min.css">
    <link rel="stylesheet" type="text/css" href="../css/dc.css"/>
</head>
<body>

<div class="container">
<script type="text/javascript" src="header.js"></script>

<div id="swatch"></div>
<div id="bar"></div>

<p style="clear:left">Example of creating an external chart and attaching it to the dc.js chart registry.</p>

<p>The color swatch widget is not supposed to be useful, just the most minimal example.</p>

<script type="text/javascript" src="../js/d3.js"></script>
<script type="text/javascript" src="../js/crossfilter.js"></script>
<script type="text/javascript" src="../js/dc.js"></script>
<script type="text/javascript">

  class ColorSwatch {
      constructor(parent, group) {
          this._groupAll = null;
          this._colors = null;
          this._width = this._height = 200;
          this._duration = 500;
          this._root = d3.select(parent);
          dc.registerChart(this, chartGroup);
          this._rect = null;
      }

      // initialization functions for user

      groupAll(groupAll) {
          if(!arguments.length)
              return this._groupAll;
          this._groupAll = groupAll;
          return this;
      }

      colors(colors) {
          if(!arguments.length)
              return this._colors;
          this._colors = colors;
          return this;
      }

      // interface for dc.js chart registry

      render() {
          let svg = _root.selectAll('svg')
              .data([0])
              .join('svg')
              .attr('width', this._width)
              .attr('height', this._width);
          this._rect = svg.selectAll('rect.swatch')
              .data([0])
              .join('rect')
              .attr('class', 'swatch')
              .attr('width', this._width)
              .attr('height', this._width);
          this.redraw();
      }

      redraw() {
          this._rect.transition()
              .duration(this._duration)
              .attr('fill', this._colors(this._groupAll.value()));
      }
  }
  var swatch = new Swatch('#swatch'), bar = new dc.BarChart("#test")
  d3.csv("morley.csv").then(function(experiments) {

      experiments.forEach(function(x) {
          x.Speed = +x.Speed;
      });

      const cf = crossfilter(experiments),
            groupAllSpeed = cf.groupAll().reduceSum(d => d.Speed);

      swatch
          .groupAll(groupAllSpeed)
          .colors(d3.scaleSequential([0, 10000], d3.schemeRdYlGn))
      const runDimension        = cf.dimension(function(d) {return +d.Run;}),
            speedSumGroup       = runDimension.group().reduceSum(function(d) {return d.Speed * d.Run / 1000;});

      bar
          .width(768)
          .height(480)
          .x(d3.scaleLinear().domain([6,20]))
          .brushOn(false)
          .yAxisLabel("This is the Y Axis!")
          .dimension(runDimension)
          .group(speedSumGroup)
          .renderLabel(true);

      dc.renderAll();
  });

`</script>

</div>
</body>
</html>
