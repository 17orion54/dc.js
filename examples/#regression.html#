<!DOCTYPE html>
<html lang="en">
<head>
    <title>dc.js - Scatter Plot Example</title>
    <meta charset="UTF-8">
    <link rel="stylesheet" type="text/css" href="../css/bootstrap.min.css">
    <link rel="stylesheet" type="text/css" href="../css/dc.css"/>
    <style>
      line.regression {
        stroke: red;
        stroke-width: 5;
        opacity: 0.5;
      }
    </style>
</head>
<body>

<select>
  <option value="speed">Speed</option>
  <option value="multiply">Speed * Run</option>
  <option value="inverse">Speed * (20 - Run)</option>
</select>

<div class="container">
<script type="text/javascript" src="header.js"></script>
<div id="test"></div>

<script type="text/javascript" src="../js/d3.js"></script>
<script type="text/javascript" src="../js/crossfilter.js"></script>
<script type="text/javascript" src="../js/dc.js"></script>
<script type="text/javascript" src="../js/regression.js"></script>
<script type="text/javascript">

var chart = new dc.ScatterPlot("#test");
d3.csv("morley.csv").then(function(experiments) {

    experiments.forEach(function(x) {
        x.Speed = +x.Speed;
    });

    var ndx                 = crossfilter(experiments),
        runDimension        = ndx.dimension(function(d) {return [+d.Run, +d.Speed*(20-d.Run)]; }),
        speedSumGroup       = runDimension.group();

    chart
        .width(768)
        .height(480)
        .x(d3.scaleLinear()).elasticX(true)
        .brushOn(false)
        .symbolSize(8)
        .clipPadding(10)
        .dimension(runDimension)
        .group(speedSumGroup);

    chart
        .on('pretransition', function() {
            var xext = d3.extent(chart.group().all(), kv => kv.key[0]);
            var r = regression.linear(chart.group().all().map(kv => [kv.key[0], kv.key[1]])),
                m = r.equation[0], b = r.equation[1],
                [x1, x2] = chart.x().domain();
            var points = [[
                x1,
                m * x1 + b
            ], [
                x2,
                m * x2 + b
            ]];
            var xScale = chart.x(), yScale = chart.y(), margins = chart.margins();
            var line = chart.g().selectAll('line.regression').data([points]);
            function do_points(line) {
                line
                    .attr('x1', d => xScale(d[0][0]) + margins.left)
                    .attr('y1', d => yScale(d[0][1]) + margins.top)
                    .attr('x2', d => xScale(d[1][0]) + margins.left)
                    .attr('y2', d => yScale(d[1][1]) + margins.top);
            }
            line = line.enter().append('line')
                .attr('class', 'regression')
                .call(do_points)
                .merge(line);
            line.transition().duration(chart.transitionDuration()).call(do_points);
        });

    chart.render();

    d3.s

});

</script>

</div>
</body>
</html>
